//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SnakeAndLaddersFinalProject.ChatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SendMessageRequest2", Namespace="http://schemas.datacontract.org/2004/07/SnakeAndLadders.Contracts.Services")]
    [System.SerializableAttribute()]
    public partial class SendMessageRequest2 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthTokenField;
        
        private int LobbyIdField;
        
        private SnakeAndLaddersFinalProject.ChatService.ChatMessageDto MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthToken {
            get {
                return this.AuthTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthTokenField, value) != true)) {
                    this.AuthTokenField = value;
                    this.RaisePropertyChanged("AuthToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int LobbyId {
            get {
                return this.LobbyIdField;
            }
            set {
                if ((this.LobbyIdField.Equals(value) != true)) {
                    this.LobbyIdField = value;
                    this.RaisePropertyChanged("LobbyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public SnakeAndLaddersFinalProject.ChatService.ChatMessageDto Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessageDto", Namespace="http://schemas.datacontract.org/2004/07/SnakeAndLadders.Contracts.Dtos")]
    [System.SerializableAttribute()]
    public partial class ChatMessageDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string SenderField;
        
        private int SenderIdField;
        
        private string TextField;
        
        private System.DateTime TimestampUtcField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SenderId {
            get {
                return this.SenderIdField;
            }
            set {
                if ((this.SenderIdField.Equals(value) != true)) {
                    this.SenderIdField = value;
                    this.RaisePropertyChanged("SenderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime TimestampUtc {
            get {
                return this.TimestampUtcField;
            }
            set {
                if ((this.TimestampUtcField.Equals(value) != true)) {
                    this.TimestampUtcField = value;
                    this.RaisePropertyChanged("TimestampUtc");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SendMessageResponse2", Namespace="http://schemas.datacontract.org/2004/07/SnakeAndLadders.Contracts.Services")]
    [System.SerializableAttribute()]
    public partial class SendMessageResponse2 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool OkField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Ok {
            get {
                return this.OkField;
            }
            set {
                if ((this.OkField.Equals(value) != true)) {
                    this.OkField = value;
                    this.RaisePropertyChanged("Ok");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.IChatService", CallbackContract=typeof(SnakeAndLaddersFinalProject.ChatService.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        SnakeAndLaddersFinalProject.ChatService.SendMessageResponse2 SendMessage(SnakeAndLaddersFinalProject.ChatService.SendMessageRequest2 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        System.Threading.Tasks.Task<SnakeAndLaddersFinalProject.ChatService.SendMessageResponse2> SendMessageAsync(SnakeAndLaddersFinalProject.ChatService.SendMessageRequest2 request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetRecent", ReplyAction="http://tempuri.org/IChatService/GetRecentResponse")]
        SnakeAndLaddersFinalProject.ChatService.ChatMessageDto[] GetRecent(int lobbyId, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetRecent", ReplyAction="http://tempuri.org/IChatService/GetRecentResponse")]
        System.Threading.Tasks.Task<SnakeAndLaddersFinalProject.ChatService.ChatMessageDto[]> GetRecentAsync(int lobbyId, int take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Subscribe", ReplyAction="http://tempuri.org/IChatService/SubscribeResponse")]
        void Subscribe(int lobbyId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Subscribe", ReplyAction="http://tempuri.org/IChatService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync(int lobbyId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Unsubscribe")]
        void Unsubscribe(int lobbyId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync(int lobbyId, int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/OnMessage")]
        void OnMessage(int lobbyId, SnakeAndLaddersFinalProject.ChatService.ChatMessageDto message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : SnakeAndLaddersFinalProject.ChatService.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<SnakeAndLaddersFinalProject.ChatService.IChatService>, SnakeAndLaddersFinalProject.ChatService.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public SnakeAndLaddersFinalProject.ChatService.SendMessageResponse2 SendMessage(SnakeAndLaddersFinalProject.ChatService.SendMessageRequest2 request) {
            return base.Channel.SendMessage(request);
        }
        
        public System.Threading.Tasks.Task<SnakeAndLaddersFinalProject.ChatService.SendMessageResponse2> SendMessageAsync(SnakeAndLaddersFinalProject.ChatService.SendMessageRequest2 request) {
            return base.Channel.SendMessageAsync(request);
        }
        
        public SnakeAndLaddersFinalProject.ChatService.ChatMessageDto[] GetRecent(int lobbyId, int take) {
            return base.Channel.GetRecent(lobbyId, take);
        }
        
        public System.Threading.Tasks.Task<SnakeAndLaddersFinalProject.ChatService.ChatMessageDto[]> GetRecentAsync(int lobbyId, int take) {
            return base.Channel.GetRecentAsync(lobbyId, take);
        }
        
        public void Subscribe(int lobbyId, int userId) {
            base.Channel.Subscribe(lobbyId, userId);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(int lobbyId, int userId) {
            return base.Channel.SubscribeAsync(lobbyId, userId);
        }
        
        public void Unsubscribe(int lobbyId, int userId) {
            base.Channel.Unsubscribe(lobbyId, userId);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(int lobbyId, int userId) {
            return base.Channel.UnsubscribeAsync(lobbyId, userId);
        }
    }
}
